/*
*
* SPDX-License-Identifier: MIT
*
*/

//
// common/location based combos (cut/copy/paste, esc, app, etc.)
//

#define COMBO_LAYER(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    slow-release; \
    timeout-ms = <45>; \
};
#define COMBO_ANY(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <45>; \
};


/*
 Some combos need to be in specific places depending on
 the underlying alpha, esp H-Digraph combos, so they are
 defined in the individual ##-combo.dtsi file.
*/


/*    KEY POSITION Names (alphas & combos limited to 3x5+2 common core)
FRA   FR1 FR2 FR3 FR4 FR5                      FR6 FR7 FR8 FR9 FR0   FRB
NRA   NR1 NR2 NR3 NR4 NR5                      NR6 NR7 NR8 NR9 NR0   NRB
    ╭─────────────────────╮                  ╭─────────────────────╮
LT5 │ LT4 LT3 LT2 LT1 LT0 │ LTA          RTA │ RT0 RT1 RT2 RT3 RT4 │ RT5
LM5 │ LM4 LM3 LM2 LM1 LM0 │ LMA          RMA │ RM0 RM1 RM2 RM3 RM4 │ RM5
LB5 │ LB4 LB3 LB2 LB1 LB0 │ LBA LBB  RBB RBA │ RB0 RB1 RB2 RB3 RB4 │ RB5
    ╰───────╮ LH3 LH2 LH1 | LH0 LHA  RHA RH0 | RH1 RH2 RH3 ╭───────╯
     LH5 LH4╰─────────────╯                  ╰─────────────╯RH4 LH5
*/

//
// control/modes
//

COMBO_ANY(enmode,    &m_alpha,      LM3 LM2 LM1) // switch to latin input script, and set base layer to HD
COMBO_ANY(jpmode,    &m_japan,      RM1 RM2 RM3) // switch to Japanese input script, and set base layer to Japanese
COMBO_ANY(cfgL,      &mo l_cfg,     LH2 LH1)     // get the settings/media layer from anywhere
COMBO_ANY(cfgR,      &mo l_cfg,     RH1 RH2)
COMBO_ANY(numpad,    &tog l_num,    LH1 RH1)
COMBO_ANY(appswitch, &SlAppy,       LT1 LT0)     // App switch
COMBO_LAYER(docaps,  &caps_word,    RB3 RB4, l_alpha) // CAPSWORD
COMBO_LAYER(capslk,  &kp CAPS,      RB2 RB3 RB4, l_alpha) // CAPS LOCK

//
// Editing actions (&whitespace)
//
COMBO_ANY(Gent,      &kp LG(RETURN),    LB2 LB1 LB0)
COMBO_ANY(entr,      &kp RETURN,        LB1 LB0)
COMBO_ANY(tab,       &kp TAB,           LT4 LT3)
COMBO_ANY(stab,      &kp LS(TAB),       LT4 LT3 LT2)
COMBO_ANY(spce,      &kp SPACE,         LM1 LM0)
COMBO_ANY(esc,       &kp ESC,           LM4 LM1)

COMBO_ANY(sall,      &kp LG(A),         LB4 LB1)
COMBO_ANY(undo,      &kp LG(Z),         LB4 LB3)
COMBO_ANY(redo,      &kp LG(LS(Z)),     LB4 LB3 LB2)
COMBO_ANY(copy,      &lk LG(X) LG(C),   LB3 LB2)
COMBO_ANY(pste,      &lk LG(LS(LA(V)))  LG(V), LB2 LB1)
COMBO_LAYER(quit,    &kp LG(Q),         LT0 LM0, l_alpha)
COMBO_LAYER(new,     &kp LG(N),         LM0 LB0, l_alpha)
COMBO_LAYER(cloz,    &kp LG(W),         RT0 RM0, l_alpha)
COMBO_LAYER(open,    &kp LG(O),         RM0 RB0, l_alpha)

COMBO_LAYER(selword, &m_selword,        LB4 LB0, l_alpha)
COMBO_LAYER(findsel, &m_findsel,        LM4 LB0, l_alpha)

//
// type a glyph (tiny board accommodation)
//
COMBO_LAYER(t_Coln,  &lk LA(SEMI) COLON,    RT1 RT3, l_alpha)
COMBO_LAYER(t_Semi,  &kp SEMI,              RM0 RM1, l_alpha)
COMBO_LAYER(t_Excl,  &kp EXCL,              RT1 RT2, l_alpha)
COMBO_LAYER(t_Ques,  &kp QMARK,             RT2 RT3, l_alpha)
COMBO_LAYER(t_Grav,  &kp GRAVE,             RT3 RT4, l_alpha)
COMBO_LAYER(t_atMk,  &lk LS(LA(SEMI)) AT_SIGN,  RT0 RT1, l_alpha)   // @ (№ if held)
COMBO_LAYER(t_Under, &kp UNDER,             RB1 RB3, l_alpha)       // _
COMBO_LAYER(t_Equal, &lk PRCNT EQUAL,       RB2 RB3, l_alpha)       // = (percent if held)
COMBO_LAYER(t_Ndash, &lk LA(LS(MINUS)) LA(MINUS), RB0 RB1, l_alpha) // N-dash (M-dash if held)
COMBO_LAYER(t_Mdash, &kp LA(LS(MINUS)),     RB0 RB2, l_alpha)       // M-dash (minus)
COMBO_LAYER(t_Tilde, &kp TILDE,             RB0 RB3, l_alpha)       // ~ tilde (wave dash)

