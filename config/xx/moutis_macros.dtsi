 /*
 * t_  = type text
 * b_  = backspace then type text (often for "adaptive key")
 * m_  = macro (performs commands/behaviors, incl. typing).
 * ak_ = type a letter as an adaptive key (consider the prior key).
 */
 

     ZMK_MACRO(m_alpha,
        bindings =
            <&kp LANG2>,    // switch to Roman/Latin script (mhenk)
            <&to l_alpha>; //  alpha layer default
       )
     ZMK_MACRO(m_japan,
        bindings =
            <&kp LANG1>,    // switch to Japanese script (henk)
            <&to l_jp>;     // Romaji layer default (no adaptives)
       )
        
   ZMK_MACRO(SlAppy,
        wait-ms = <50>;
        tap-ms = <20>;
        bindings =
                    <&macro_press &kp RGUI>    // leave GUI down to keep menu up
                  , <&macro_tap &kp TAB>       // (use press for repeat)
                  , <&tog l_nav>               // to navigate the app menu
                  , <&macro_pause_for_release> // hold to keep menu up or for repeat ...
                  , <&tog l_nav>               // done navigating
                  , <&macro_tap &skapp LGUI>   // release other GUI after a timeout
                  , <&macro_release &kp RGUI>  // release the previous hold
                  ;
        )
    ZMK_MACRO(SlApBack,
        wait-ms = <50>;
        tap-ms = <20>;
        bindings =
                    <&macro_press &sk RGUI> // leave GUI down to keep menu up
                  , <&macro_press &kp LSHFT> //
                  , <&macro_tap &kp TAB> // just tap for no repeat
                  , <&macro_pause_for_release> // hold for repeat ...
                  , <&macro_release &kp LSHFT> //
                  , <&macro_tap &skapp LGUI> // release other GUI after a timeout
                  , <&macro_release &sk RGUI> // now release the previous hold
                  ;
        )
    ZMK_MACRO(rst_btldr,
        bindings = <&rst_boot 0 0>;
        )

    ZMK_MACRO(m_findsel,
        tap-ms = <40>;
        bindings = <&macro_tap &kp LG(C)>
                    , <&macro_tap &kp LG(F)>
                    , <&macro_tap &kp LG(V)>
                    , <&macro_tap &kp RETURN>
                    , <&macro_tap &kp LG(G)>
                ;
        )
    ZMK_MACRO(m_selword,
        tap-ms = <40>;
        bindings = <&macro_tap &kp LA(LEFT)>
                    , <&macro_tap &kp LS(LA(RIGHT))>
                ;
        )
        
    ZMK_MACRO(pairDquo,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LA(LBKT) &kp LS(LA(LBKT)) &kp LEFT>
                ;
        )
    ZMK_MACRO(pairSquo,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LA(RBKT) &kp LS(LA(RBKT)) &kp LEFT>
                ;
        )
    ZMK_MACRO(pairLtGt,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LT &kp GT &kp LEFT>
                ;
        )
    ZMK_MACRO(pairPar,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LPAR &kp RPAR &kp LEFT>
                ;
        )
    ZMK_MACRO(pairBrc,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LBRC &kp RBRC &kp LEFT>
                ;
        )
    ZMK_MACRO(pairBkt,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&kp LBKT &kp RBKT &kp LEFT>
                ;
        )

    ZMK_MACRO(ak_dot,
        wait-ms = <50>; // need to slow this down for some systems.
        bindings = <&macro_tap &kp DOT>
                , <&sl l_akDot>
                ;
        )
    ZMK_MACRO(t_Qu,
        tap-ms = <40>;
        bindings = <&ak_Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        )
    ZMK_MACRO(t_Semi,
        tap-ms = <40>;
        bindings = <&macro_release &kp LSHFT>
                , <&macro_tap &kp SEMICOLON>
                ;
        )
